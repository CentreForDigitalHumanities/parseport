version: "3"

services:
    nginx:
        container_name: nginx
        restart: unless-stopped
        image: nginx:latest
        volumes:
            - ./nginx.conf:/etc/nginx/nginx.conf
        ports:
            - "5000:80"

    ng-dev:
        image: pp-ng-dev
        container_name: pp-ng
        restart: no
        profiles: ["dev"]
        build:
            context: ./frontend
            dockerfile: Dockerfile.dev
        command: ng serve --host 0.0.0.0 --poll 200 --disable-host-check
        expose:
            - "4200"
        volumes:
            - ./frontend:/app

    ng-prod:
        image: pp-ng-prod
        container_name: pp-ng
        restart: unless-stopped
        profiles: ["prod"]
        build:
            context: ./frontend
            dockerfile: Dockerfile.prod

    dj-prod: &dj-prod
        image: pp-dj-prod
        container_name: pp-dj
        build: backend
        profiles: ["prod"]
        restart: unless-stopped
        environment:
            - DJANGO_DEBUG=0
            - DJANGO_SECRET_KEY=$DJANGO_SECRET_KEY
        command: >
            gunicorn -b 0.0.0.0:8000 wsgi:application
            --pythonpath=parseport
            --capture-output
            --access-logfile /logs/access_log
            --error-logfile /logs/error_log
        expose:
            - "8000"
        volumes:
            - ./backend:/src
            # mounting the server's data folder under /data
            - ../:/data
            - ../../log/django:/logs

    dj-dev:
        <<: *dj-prod
        image: pp-dj-dev
        restart: no
        profiles: ["dev"]
        environment:
            - DJANGO_DEBUG=1
            - DJANGO_SECRET_KEY=$DJANGO_SECRET_KEY
        command: python manage.py runserver 0.0.0.0:8000

    spindle-prod: &spindle-prod
        image: pp-spindle-prod
        container_name: pp-spindle
        build:
            context: ../spindle-server
        profiles: ["prod"]
        restart: unless-stopped
        command: >
            gunicorn -w 1 -b 0.0.0.0:32768 'app:create_app()'
            --timeout 600
            --capture-output
            --access-logfile /logs/access_log
            --error-logfile /logs/error_log
        expose:
            - "32768"
        volumes:
            - ../../log/spindle:/logs

    spindle-dev:
        <<: *spindle-prod
        image: pp-spindle-dev
        restart: no
        profiles: ["dev"]
        command: flask run --host 0.0.0.0 --port 32768
        ports:
            - "32768:32768"

    latex-prod: &latex-prod
        image: pp-latex-prod
        container_name: pp-latex
        build:
            context: ../latex-service
        profiles: ["prod"]
        restart: unless-stopped
        command: >
            gunicorn -w 1 -b 0.0.0.0:32769 'app:app'
            --capture-output
            --access-logfile /logs/access_log
            --error-logfile /logs/error_log
        expose:
            - "32769"
        volumes:
            - ../../log/latex:/logs

    latex-dev:
        <<: *latex-prod
        image: pp-latex-dev
        restart: no
        profiles: ["dev"]
        command: flask run --host 0.0.0.0 --port 32769
        ports:
            - "32769:32769"

    mg-parser-prod: &mg-parser-prod
        image: pp-mg-parser-prod
        container_name: pp-mg-parser
        build:
            context: ../mg-parser-server
        profiles: ["prod"]
        restart: unless-stopped
        environment:
            - MG_PARSER_PORT=32770
            - FLASK_DEBUG=0
        command: >
            gunicorn -w 1 -b 0.0.0.0:32770 'app:create_app()'
            --capture-output
            --access-logfile /logs/access_log
            --error-logfile /logs/error_log
        expose:
            - "32770"
        volumes:
            - ../../log/mg-parser:/logs

    mg-parser-dev:
        <<: *mg-parser-prod
        image: pp-mg-parser-dev
        restart: no
        profiles: ["dev"]
        environment:
            - FLASK_DEBUG=1
        command: flask run --host 0.0.0.0 --port 32770
        ports:
            - "32770:32770"


networks:
    parseport:
        driver: bridge

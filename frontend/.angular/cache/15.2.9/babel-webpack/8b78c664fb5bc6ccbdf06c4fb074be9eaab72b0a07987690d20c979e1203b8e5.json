{"ast":null,"code":"import { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ConfigService {\n  constructor(http) {\n    this.http = http;\n  }\n  get() {\n    if (!this.config) {\n      this.config = new Promise((resolve, reject) => this.http.get(environment.assets + '/config.json').subscribe(response => {\n        resolve(response);\n      }));\n    }\n    return this.config;\n  }\n}\nConfigService.ɵfac = function ConfigService_Factory(t) {\n  return new (t || ConfigService)(i0.ɵɵinject(i1.HttpClient));\n};\nConfigService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ConfigService,\n  factory: ConfigService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,WAAW,QAAQ,gCAAgC;;;AAS5D,OAAM,MAAOC,aAAa;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAgB;EAEjCC,GAAGA,CAAA;IACN,IAAI,CAAC,IAAI,CAACC,MAAM,EAAE;MACd,IAAI,CAACA,MAAM,GAAG,IAAIC,OAAO,CAAS,CAACC,OAAO,EAAEC,MAAM,KAC9C,IAAI,CAACL,IAAI,CAACC,GAAG,CAACJ,WAAW,CAACS,MAAM,GAAG,cAAc,CAAC,CAACC,SAAS,CAACC,QAAQ,IAAG;QACpEJ,OAAO,CAACI,QAAkB,CAAC;MAC/B,CAAC,CAAC,CAAC;;IAGX,OAAO,IAAI,CAACN,MAAM;EACtB;;AAdSJ,aAAa;mBAAbA,aAAa,EAAAW,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAbd,aAAa;SAAbA,aAAa;EAAAe,OAAA,EAAbf,aAAa,CAAAgB,IAAA;EAAAC,UAAA,EAFV;AAAM","names":["environment","ConfigService","constructor","http","get","config","Promise","resolve","reject","assets","subscribe","response","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Admin\\Desktop\\UUCDH\\parseport\\frontend\\src\\app\\services\\config.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\n\nexport interface Config {\n    backendUrl: string;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ConfigService {\n    private config?: Promise<Config>;\n\n    constructor(private http: HttpClient) { }\n\n    public get(): Promise<Config> {\n        if (!this.config) {\n            this.config = new Promise<Config>((resolve, reject) =>\n                this.http.get(environment.assets + '/config.json').subscribe(response => {\n                    resolve(response as Config);\n                }));\n        }\n\n        return this.config;\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
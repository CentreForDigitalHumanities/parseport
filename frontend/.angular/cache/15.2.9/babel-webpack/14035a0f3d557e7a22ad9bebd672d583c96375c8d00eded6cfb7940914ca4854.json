{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Admin/Desktop/UUCDH/parseport/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { lastValueFrom } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./config.service\";\nimport * as i2 from \"@angular/common/http\";\nexport class BackendService {\n  constructor(config, http) {\n    this.config = config;\n    this.http = http;\n    this.apiUrl = null;\n  }\n  /**\r\n   * Collect JSON from an specific url.\r\n   * @param objectUrl The part of the URL after the backendUrl from config.json.\r\n   * (i.e. whatever comes after, for example, '/api/').\r\n   * Note that this method will add a '/' at the end of the url if it does not exist.\r\n   */\n  get(objectUrl) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      // const baseUrl = await this.getApiUrl();\n      if (!objectUrl.endsWith('/')) {\n        objectUrl = `${objectUrl}/`;\n      }\n      const url = encodeURI(baseUrl + objectUrl);\n      try {\n        return yield lastValueFrom(_this.http.get(url));\n      } catch (error) {\n        return yield _this.handleError(error);\n      }\n    })();\n  }\n  getApiUrl() {\n    if (!this.apiUrl) {\n      return this.config.get().then(config => config.backendUrl);\n    } else {\n      return Promise.resolve(this.apiUrl);\n    }\n  }\n  handleError(error) {\n    console.error('An error occurred', error);\n    return Promise.reject(error.message || error);\n  }\n}\nBackendService.ɵfac = function BackendService_Factory(t) {\n  return new (t || BackendService)(i0.ɵɵinject(i1.ConfigService), i0.ɵɵinject(i2.HttpClient));\n};\nBackendService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BackendService,\n  factory: BackendService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAEA,SAASA,aAAa,QAAQ,MAAM;;;;AAOpC,OAAM,MAAOC,cAAc;EAGvBC,YAAsBC,MAAqB,EAAYC,IAAgB;IAAjD,KAAAD,MAAM,GAANA,MAAM;IAA2B,KAAAC,IAAI,GAAJA,IAAI;IAFjD,KAAAC,MAAM,GAA2B,IAAI;EAE4B;EAE3E;;;;;;EAMMC,GAAGA,CAACC,SAAiB;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACvB;MACA,IAAI,CAACF,SAAS,CAACG,QAAQ,CAAC,GAAG,CAAC,EAAE;QAC1BH,SAAS,GAAG,GAAGA,SAAS,GAAG;;MAE/B,MAAMI,GAAG,GAAGC,SAAS,CAACC,OAAO,GAAGN,SAAS,CAAC;MAE1C,IAAI;QACA,aAAaP,aAAa,CAACQ,KAAI,CAACJ,IAAI,CAACE,GAAG,CAACK,GAAG,CAAC,CAAC;OACjD,CAAC,OAAOG,KAAK,EAAE;QACZ,aAAaN,KAAI,CAACO,WAAW,CAACD,KAAK,CAAC;;IACvC;EACL;EAEAE,SAASA,CAAA;IACL,IAAI,CAAC,IAAI,CAACX,MAAM,EAAE;MACd,OAAO,IAAI,CAACF,MAAM,CAACG,GAAG,EAAE,CAACW,IAAI,CAACd,MAAM,IAAIA,MAAM,CAACe,UAAU,CAAC;KAC7D,MAAM;MACH,OAAOC,OAAO,CAACC,OAAO,CAAC,IAAI,CAACf,MAAM,CAAC;;EAE3C;EAEUU,WAAWA,CAACD,KAAU;IAC5BO,OAAO,CAACP,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;IACzC,OAAOK,OAAO,CAACG,MAAM,CAACR,KAAK,CAACS,OAAO,IAAIT,KAAK,CAAC;EACjD;;AApCSb,cAAc;mBAAdA,cAAc,EAAAuB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,aAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,UAAA;AAAA;AAAd5B,cAAc;SAAdA,cAAc;EAAA6B,OAAA,EAAd7B,cAAc,CAAA8B,IAAA;EAAAC,UAAA,EAFX;AAAM","names":["lastValueFrom","BackendService","constructor","config","http","apiUrl","get","objectUrl","_this","_asyncToGenerator","endsWith","url","encodeURI","baseUrl","error","handleError","getApiUrl","then","backendUrl","Promise","resolve","console","reject","message","i0","ɵɵinject","i1","ConfigService","i2","HttpClient","factory","ɵfac","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Admin\\Desktop\\UUCDH\\parseport\\frontend\\src\\app\\services\\backend.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { lastValueFrom } from 'rxjs';\nimport { ConfigService } from './config.service';\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class BackendService {\n    protected apiUrl: Promise<string> | null = null;\n\n    constructor(protected config: ConfigService, protected http: HttpClient) { }\n\n    /**\n     * Collect JSON from an specific url.\n     * @param objectUrl The part of the URL after the backendUrl from config.json.\n     * (i.e. whatever comes after, for example, '/api/').\n     * Note that this method will add a '/' at the end of the url if it does not exist.\n     */\n    async get(objectUrl: string): Promise<any> {\n        // const baseUrl = await this.getApiUrl();\n        if (!objectUrl.endsWith('/')) {\n            objectUrl = `${objectUrl}/`;\n        }\n        const url = encodeURI(baseUrl + objectUrl);\n\n        try {\n            return await lastValueFrom(this.http.get(url));\n        } catch (error) {\n            return await this.handleError(error);\n        }\n    }\n\n    getApiUrl(): Promise<string> {\n        if (!this.apiUrl) {\n            return this.config.get().then(config => config.backendUrl);\n        } else {\n            return Promise.resolve(this.apiUrl);\n        }\n    }\n\n    protected handleError(error: any): Promise<any> {\n        console.error('An error occurred', error);\n        return Promise.reject(error.message || error);\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}